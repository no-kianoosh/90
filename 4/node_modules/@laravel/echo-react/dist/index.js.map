{"version":3,"file":"index.js","sources":["../../laravel-echo/dist/echo.js","../src/config/index.ts","../src/util/index.ts","../src/hooks/use-echo.ts"],"sourcesContent":["class u {\n  constructor() {\n    this.notificationCreatedEvent = \".Illuminate\\\\Notifications\\\\Events\\\\BroadcastNotificationCreated\";\n  }\n  /**\n   * Listen for a whisper event on the channel instance.\n   */\n  listenForWhisper(e, t) {\n    return this.listen(\".client-\" + e, t);\n  }\n  /**\n   * Listen for an event on the channel instance.\n   */\n  notification(e) {\n    return this.listen(this.notificationCreatedEvent, e);\n  }\n  /**\n   * Stop listening for notification events on the channel instance.\n   */\n  stopListeningForNotification(e) {\n    return this.stopListening(this.notificationCreatedEvent, e);\n  }\n  /**\n   * Stop listening for a whisper event on the channel instance.\n   */\n  stopListeningForWhisper(e, t) {\n    return this.stopListening(\".client-\" + e, t);\n  }\n}\nclass d {\n  /**\n   * Create a new class instance.\n   */\n  constructor(e) {\n    this.namespace = e;\n  }\n  /**\n   * Format the given event name.\n   */\n  format(e) {\n    return [\".\", \"\\\\\"].includes(e.charAt(0)) ? e.substring(1) : (this.namespace && (e = this.namespace + \".\" + e), e.replace(/\\./g, \"\\\\\"));\n  }\n  /**\n   * Set the event namespace.\n   */\n  setNamespace(e) {\n    this.namespace = e;\n  }\n}\nfunction w(n) {\n  try {\n    new n();\n  } catch (e) {\n    if (e instanceof Error && e.message.includes(\"is not a constructor\"))\n      return !1;\n  }\n  return !0;\n}\nclass l extends u {\n  /**\n   * Create a new class instance.\n   */\n  constructor(e, t, s) {\n    super(), this.name = t, this.pusher = e, this.options = s, this.eventFormatter = new d(this.options.namespace), this.subscribe();\n  }\n  /**\n   * Subscribe to a Pusher channel.\n   */\n  subscribe() {\n    this.subscription = this.pusher.subscribe(this.name);\n  }\n  /**\n   * Unsubscribe from a Pusher channel.\n   */\n  unsubscribe() {\n    this.pusher.unsubscribe(this.name);\n  }\n  /**\n   * Listen for an event on the channel instance.\n   */\n  listen(e, t) {\n    return this.on(this.eventFormatter.format(e), t), this;\n  }\n  /**\n   * Listen for all events on the channel instance.\n   */\n  listenToAll(e) {\n    return this.subscription.bind_global((t, s) => {\n      if (t.startsWith(\"pusher:\"))\n        return;\n      let r = String(this.options.namespace ?? \"\").replace(\n        /\\./g,\n        \"\\\\\"\n      ), a = t.startsWith(r) ? t.substring(r.length + 1) : \".\" + t;\n      e(a, s);\n    }), this;\n  }\n  /**\n   * Stop listening for an event on the channel instance.\n   */\n  stopListening(e, t) {\n    return t ? this.subscription.unbind(\n      this.eventFormatter.format(e),\n      t\n    ) : this.subscription.unbind(this.eventFormatter.format(e)), this;\n  }\n  /**\n   * Stop listening for all events on the channel instance.\n   */\n  stopListeningToAll(e) {\n    return e ? this.subscription.unbind_global(e) : this.subscription.unbind_global(), this;\n  }\n  /**\n   * Register a callback to be called anytime a subscription succeeds.\n   */\n  subscribed(e) {\n    return this.on(\"pusher:subscription_succeeded\", () => {\n      e();\n    }), this;\n  }\n  /**\n   * Register a callback to be called anytime a subscription error occurs.\n   */\n  error(e) {\n    return this.on(\"pusher:subscription_error\", (t) => {\n      e(t);\n    }), this;\n  }\n  /**\n   * Bind a channel to an event.\n   */\n  on(e, t) {\n    return this.subscription.bind(e, t), this;\n  }\n}\nclass f extends l {\n  /**\n   * Send a whisper event to other clients in the channel.\n   */\n  whisper(e, t) {\n    return this.pusher.channels.channels[this.name].trigger(\n      `client-${e}`,\n      t\n    ), this;\n  }\n}\nclass g extends l {\n  /**\n   * Send a whisper event to other clients in the channel.\n   */\n  whisper(e, t) {\n    return this.pusher.channels.channels[this.name].trigger(\n      `client-${e}`,\n      t\n    ), this;\n  }\n}\nclass y extends f {\n  /**\n   * Register a callback to be called anytime the member list changes.\n   */\n  here(e) {\n    return this.on(\"pusher:subscription_succeeded\", (t) => {\n      e(Object.keys(t.members).map((s) => t.members[s]));\n    }), this;\n  }\n  /**\n   * Listen for someone joining the channel.\n   */\n  joining(e) {\n    return this.on(\"pusher:member_added\", (t) => {\n      e(t.info);\n    }), this;\n  }\n  /**\n   * Send a whisper event to other clients in the channel.\n   */\n  whisper(e, t) {\n    return this.pusher.channels.channels[this.name].trigger(\n      `client-${e}`,\n      t\n    ), this;\n  }\n  /**\n   * Listen for someone leaving the channel.\n   */\n  leaving(e) {\n    return this.on(\"pusher:member_removed\", (t) => {\n      e(t.info);\n    }), this;\n  }\n}\nclass b extends u {\n  /**\n   * Create a new class instance.\n   */\n  constructor(e, t, s) {\n    super(), this.events = {}, this.listeners = {}, this.name = t, this.socket = e, this.options = s, this.eventFormatter = new d(this.options.namespace), this.subscribe();\n  }\n  /**\n   * Subscribe to a Socket.io channel.\n   */\n  subscribe() {\n    this.socket.emit(\"subscribe\", {\n      channel: this.name,\n      auth: this.options.auth || {}\n    });\n  }\n  /**\n   * Unsubscribe from channel and ubind event callbacks.\n   */\n  unsubscribe() {\n    this.unbind(), this.socket.emit(\"unsubscribe\", {\n      channel: this.name,\n      auth: this.options.auth || {}\n    });\n  }\n  /**\n   * Listen for an event on the channel instance.\n   */\n  listen(e, t) {\n    return this.on(this.eventFormatter.format(e), t), this;\n  }\n  /**\n   * Stop listening for an event on the channel instance.\n   */\n  stopListening(e, t) {\n    return this.unbindEvent(this.eventFormatter.format(e), t), this;\n  }\n  /**\n   * Register a callback to be called anytime a subscription succeeds.\n   */\n  subscribed(e) {\n    return this.on(\"connect\", (t) => {\n      e(t);\n    }), this;\n  }\n  /**\n   * Register a callback to be called anytime an error occurs.\n   */\n  error(e) {\n    return this;\n  }\n  /**\n   * Bind the channel's socket to an event and store the callback.\n   */\n  on(e, t) {\n    return this.listeners[e] = this.listeners[e] || [], this.events[e] || (this.events[e] = (s, r) => {\n      this.name === s && this.listeners[e] && this.listeners[e].forEach((a) => a(r));\n    }, this.socket.on(e, this.events[e])), this.listeners[e].push(t), this;\n  }\n  /**\n   * Unbind the channel's socket from all stored event callbacks.\n   */\n  unbind() {\n    Object.keys(this.events).forEach((e) => {\n      this.unbindEvent(e);\n    });\n  }\n  /**\n   * Unbind the listeners for the given event.\n   */\n  unbindEvent(e, t) {\n    this.listeners[e] = this.listeners[e] || [], t && (this.listeners[e] = this.listeners[e].filter(\n      (s) => s !== t\n    )), (!t || this.listeners[e].length === 0) && (this.events[e] && (this.socket.removeListener(e, this.events[e]), delete this.events[e]), delete this.listeners[e]);\n  }\n}\nclass v extends b {\n  /**\n   * Send a whisper event to other clients in the channel.\n   */\n  whisper(e, t) {\n    return this.socket.emit(\"client event\", {\n      channel: this.name,\n      event: `client-${e}`,\n      data: t\n    }), this;\n  }\n}\nclass m extends v {\n  /**\n   * Register a callback to be called anytime the member list changes.\n   */\n  here(e) {\n    return this.on(\"presence:subscribed\", (t) => {\n      e(t.map((s) => s.user_info));\n    }), this;\n  }\n  /**\n   * Listen for someone joining the channel.\n   */\n  joining(e) {\n    return this.on(\n      \"presence:joining\",\n      (t) => e(t.user_info)\n    ), this;\n  }\n  /**\n   * Send a whisper event to other clients in the channel.\n   */\n  whisper(e, t) {\n    return this.socket.emit(\"client event\", {\n      channel: this.name,\n      event: `client-${e}`,\n      data: t\n    }), this;\n  }\n  /**\n   * Listen for someone leaving the channel.\n   */\n  leaving(e) {\n    return this.on(\n      \"presence:leaving\",\n      (t) => e(t.user_info)\n    ), this;\n  }\n}\nclass h extends u {\n  /**\n   * Subscribe to a channel.\n   */\n  subscribe() {\n  }\n  /**\n   * Unsubscribe from a channel.\n   */\n  unsubscribe() {\n  }\n  /**\n   * Listen for an event on the channel instance.\n   */\n  listen(e, t) {\n    return this;\n  }\n  /**\n   * Listen for all events on the channel instance.\n   */\n  listenToAll(e) {\n    return this;\n  }\n  /**\n   * Stop listening for an event on the channel instance.\n   */\n  stopListening(e, t) {\n    return this;\n  }\n  /**\n   * Register a callback to be called anytime a subscription succeeds.\n   */\n  subscribed(e) {\n    return this;\n  }\n  /**\n   * Register a callback to be called anytime an error occurs.\n   */\n  error(e) {\n    return this;\n  }\n  /**\n   * Bind a channel to an event.\n   */\n  on(e, t) {\n    return this;\n  }\n}\nclass k extends h {\n  /**\n   * Send a whisper event to other clients in the channel.\n   */\n  whisper(e, t) {\n    return this;\n  }\n}\nclass C extends h {\n  /**\n   * Send a whisper event to other clients in the channel.\n   */\n  whisper(e, t) {\n    return this;\n  }\n}\nclass _ extends k {\n  /**\n   * Register a callback to be called anytime the member list changes.\n   */\n  here(e) {\n    return this;\n  }\n  /**\n   * Listen for someone joining the channel.\n   */\n  joining(e) {\n    return this;\n  }\n  /**\n   * Send a whisper event to other clients in the channel.\n   */\n  whisper(e, t) {\n    return this;\n  }\n  /**\n   * Listen for someone leaving the channel.\n   */\n  leaving(e) {\n    return this;\n  }\n}\nconst c = class c {\n  /**\n   * Create a new class instance.\n   */\n  constructor(e) {\n    this.setOptions(e), this.connect();\n  }\n  /**\n   * Merge the custom options with the defaults.\n   */\n  setOptions(e) {\n    this.options = {\n      ...c._defaultOptions,\n      ...e,\n      broadcaster: e.broadcaster\n    };\n    let t = this.csrfToken();\n    t && (this.options.auth.headers[\"X-CSRF-TOKEN\"] = t, this.options.userAuthentication.headers[\"X-CSRF-TOKEN\"] = t), t = this.options.bearerToken, t && (this.options.auth.headers.Authorization = \"Bearer \" + t, this.options.userAuthentication.headers.Authorization = \"Bearer \" + t);\n  }\n  /**\n   * Extract the CSRF token from the page.\n   */\n  csrfToken() {\n    var e, t;\n    return typeof window < \"u\" && ((e = window.Laravel) != null && e.csrfToken) ? window.Laravel.csrfToken : this.options.csrfToken ? this.options.csrfToken : typeof document < \"u\" && typeof document.querySelector == \"function\" ? ((t = document.querySelector('meta[name=\"csrf-token\"]')) == null ? void 0 : t.getAttribute(\"content\")) ?? null : null;\n  }\n};\nc._defaultOptions = {\n  auth: {\n    headers: {}\n  },\n  authEndpoint: \"/broadcasting/auth\",\n  userAuthentication: {\n    endpoint: \"/broadcasting/user-auth\",\n    headers: {}\n  },\n  csrfToken: null,\n  bearerToken: null,\n  host: null,\n  key: null,\n  namespace: \"App.Events\"\n};\nlet i = c;\nclass o extends i {\n  constructor() {\n    super(...arguments), this.channels = {};\n  }\n  /**\n   * Create a fresh Pusher connection.\n   */\n  connect() {\n    if (typeof this.options.client < \"u\")\n      this.pusher = this.options.client;\n    else if (this.options.Pusher)\n      this.pusher = new this.options.Pusher(\n        this.options.key,\n        this.options\n      );\n    else if (typeof window < \"u\" && typeof window.Pusher < \"u\")\n      this.pusher = new window.Pusher(this.options.key, this.options);\n    else\n      throw new Error(\n        \"Pusher client not found. Should be globally available or passed via options.client\"\n      );\n  }\n  /**\n   * Sign in the user via Pusher user authentication (https://pusher.com/docs/channels/using_channels/user-authentication/).\n   */\n  signin() {\n    this.pusher.signin();\n  }\n  /**\n   * Listen for an event on a channel instance.\n   */\n  listen(e, t, s) {\n    return this.channel(e).listen(t, s);\n  }\n  /**\n   * Get a channel instance by name.\n   */\n  channel(e) {\n    return this.channels[e] || (this.channels[e] = new l(\n      this.pusher,\n      e,\n      this.options\n    )), this.channels[e];\n  }\n  /**\n   * Get a private channel instance by name.\n   */\n  privateChannel(e) {\n    return this.channels[\"private-\" + e] || (this.channels[\"private-\" + e] = new f(\n      this.pusher,\n      \"private-\" + e,\n      this.options\n    )), this.channels[\"private-\" + e];\n  }\n  /**\n   * Get a private encrypted channel instance by name.\n   */\n  encryptedPrivateChannel(e) {\n    return this.channels[\"private-encrypted-\" + e] || (this.channels[\"private-encrypted-\" + e] = new g(\n      this.pusher,\n      \"private-encrypted-\" + e,\n      this.options\n    )), this.channels[\"private-encrypted-\" + e];\n  }\n  /**\n   * Get a presence channel instance by name.\n   */\n  presenceChannel(e) {\n    return this.channels[\"presence-\" + e] || (this.channels[\"presence-\" + e] = new y(\n      this.pusher,\n      \"presence-\" + e,\n      this.options\n    )), this.channels[\"presence-\" + e];\n  }\n  /**\n   * Leave the given channel, as well as its private and presence variants.\n   */\n  leave(e) {\n    [\n      e,\n      \"private-\" + e,\n      \"private-encrypted-\" + e,\n      \"presence-\" + e\n    ].forEach((s) => {\n      this.leaveChannel(s);\n    });\n  }\n  /**\n   * Leave the given channel.\n   */\n  leaveChannel(e) {\n    this.channels[e] && (this.channels[e].unsubscribe(), delete this.channels[e]);\n  }\n  /**\n   * Get the socket ID for the connection.\n   */\n  socketId() {\n    return this.pusher.connection.socket_id;\n  }\n  /**\n   * Disconnect Pusher connection.\n   */\n  disconnect() {\n    this.pusher.disconnect();\n  }\n}\nclass I extends i {\n  constructor() {\n    super(...arguments), this.channels = {};\n  }\n  /**\n   * Create a fresh Socket.io connection.\n   */\n  connect() {\n    let e = this.getSocketIO();\n    this.socket = e(\n      this.options.host ?? void 0,\n      this.options\n    ), this.socket.io.on(\"reconnect\", () => {\n      Object.values(this.channels).forEach((t) => {\n        t.subscribe();\n      });\n    });\n  }\n  /**\n   * Get socket.io module from global scope or options.\n   */\n  getSocketIO() {\n    if (typeof this.options.client < \"u\")\n      return this.options.client;\n    if (typeof window < \"u\" && typeof window.io < \"u\")\n      return window.io;\n    throw new Error(\n      \"Socket.io client not found. Should be globally available or passed via options.client\"\n    );\n  }\n  /**\n   * Listen for an event on a channel instance.\n   */\n  listen(e, t, s) {\n    return this.channel(e).listen(t, s);\n  }\n  /**\n   * Get a channel instance by name.\n   */\n  channel(e) {\n    return this.channels[e] || (this.channels[e] = new b(\n      this.socket,\n      e,\n      this.options\n    )), this.channels[e];\n  }\n  /**\n   * Get a private channel instance by name.\n   */\n  privateChannel(e) {\n    return this.channels[\"private-\" + e] || (this.channels[\"private-\" + e] = new v(\n      this.socket,\n      \"private-\" + e,\n      this.options\n    )), this.channels[\"private-\" + e];\n  }\n  /**\n   * Get a presence channel instance by name.\n   */\n  presenceChannel(e) {\n    return this.channels[\"presence-\" + e] || (this.channels[\"presence-\" + e] = new m(\n      this.socket,\n      \"presence-\" + e,\n      this.options\n    )), this.channels[\"presence-\" + e];\n  }\n  /**\n   * Leave the given channel, as well as its private and presence variants.\n   */\n  leave(e) {\n    [e, \"private-\" + e, \"presence-\" + e].forEach((s) => {\n      this.leaveChannel(s);\n    });\n  }\n  /**\n   * Leave the given channel.\n   */\n  leaveChannel(e) {\n    this.channels[e] && (this.channels[e].unsubscribe(), delete this.channels[e]);\n  }\n  /**\n   * Get the socket ID for the connection.\n   */\n  socketId() {\n    return this.socket.id;\n  }\n  /**\n   * Disconnect Socketio connection.\n   */\n  disconnect() {\n    this.socket.disconnect();\n  }\n}\nclass p extends i {\n  constructor() {\n    super(...arguments), this.channels = {};\n  }\n  /**\n   * Create a fresh connection.\n   */\n  connect() {\n  }\n  /**\n   * Listen for an event on a channel instance.\n   */\n  listen(e, t, s) {\n    return new h();\n  }\n  /**\n   * Get a channel instance by name.\n   */\n  channel(e) {\n    return new h();\n  }\n  /**\n   * Get a private channel instance by name.\n   */\n  privateChannel(e) {\n    return new k();\n  }\n  /**\n   * Get a private encrypted channel instance by name.\n   */\n  encryptedPrivateChannel(e) {\n    return new C();\n  }\n  /**\n   * Get a presence channel instance by name.\n   */\n  presenceChannel(e) {\n    return new _();\n  }\n  /**\n   * Leave the given channel, as well as its private and presence variants.\n   */\n  leave(e) {\n  }\n  /**\n   * Leave the given channel.\n   */\n  leaveChannel(e) {\n  }\n  /**\n   * Get the socket ID for the connection.\n   */\n  socketId() {\n    return \"fake-socket-id\";\n  }\n  /**\n   * Disconnect the connection.\n   */\n  disconnect() {\n  }\n}\nclass E {\n  /**\n   * Create a new class instance.\n   */\n  constructor(e) {\n    this.options = e, this.connect(), this.options.withoutInterceptors || this.registerInterceptors();\n  }\n  /**\n   * Get a channel instance by name.\n   */\n  channel(e) {\n    return this.connector.channel(e);\n  }\n  /**\n   * Create a new connection.\n   */\n  connect() {\n    if (this.options.broadcaster === \"reverb\")\n      this.connector = new o({\n        ...this.options,\n        cluster: \"\"\n      });\n    else if (this.options.broadcaster === \"pusher\")\n      this.connector = new o(this.options);\n    else if (this.options.broadcaster === \"ably\")\n      this.connector = new o({\n        ...this.options,\n        cluster: \"\",\n        broadcaster: \"pusher\"\n      });\n    else if (this.options.broadcaster === \"socket.io\")\n      this.connector = new I(this.options);\n    else if (this.options.broadcaster === \"null\")\n      this.connector = new p(this.options);\n    else if (typeof this.options.broadcaster == \"function\" && w(this.options.broadcaster))\n      this.connector = new this.options.broadcaster(this.options);\n    else\n      throw new Error(\n        `Broadcaster ${typeof this.options.broadcaster} ${String(this.options.broadcaster)} is not supported.`\n      );\n  }\n  /**\n   * Disconnect from the Echo server.\n   */\n  disconnect() {\n    this.connector.disconnect();\n  }\n  /**\n   * Get a presence channel instance by name.\n   */\n  join(e) {\n    return this.connector.presenceChannel(e);\n  }\n  /**\n   * Leave the given channel, as well as its private and presence variants.\n   */\n  leave(e) {\n    this.connector.leave(e);\n  }\n  /**\n   * Leave the given channel.\n   */\n  leaveChannel(e) {\n    this.connector.leaveChannel(e);\n  }\n  /**\n   * Leave all channels.\n   */\n  leaveAllChannels() {\n    for (const e in this.connector.channels)\n      this.leaveChannel(e);\n  }\n  /**\n   * Listen for an event on a channel instance.\n   */\n  listen(e, t, s) {\n    return this.connector.listen(e, t, s);\n  }\n  /**\n   * Get a private channel instance by name.\n   */\n  private(e) {\n    return this.connector.privateChannel(e);\n  }\n  /**\n   * Get a private encrypted channel instance by name.\n   */\n  encryptedPrivate(e) {\n    if (this.connectorSupportsEncryptedPrivateChannels(this.connector))\n      return this.connector.encryptedPrivateChannel(e);\n    throw new Error(\n      `Broadcaster ${typeof this.options.broadcaster} ${String(\n        this.options.broadcaster\n      )} does not support encrypted private channels.`\n    );\n  }\n  connectorSupportsEncryptedPrivateChannels(e) {\n    return e instanceof o || e instanceof p;\n  }\n  /**\n   * Get the Socket ID for the connection.\n   */\n  socketId() {\n    return this.connector.socketId();\n  }\n  /**\n   * Register 3rd party request interceptiors. These are used to automatically\n   * send a connections socket id to a Laravel app with a X-Socket-Id header.\n   */\n  registerInterceptors() {\n    typeof Vue < \"u\" && (Vue != null && Vue.http) && this.registerVueRequestInterceptor(), typeof axios == \"function\" && this.registerAxiosRequestInterceptor(), typeof jQuery == \"function\" && this.registerjQueryAjaxSetup(), typeof Turbo == \"object\" && this.registerTurboRequestInterceptor();\n  }\n  /**\n   * Register a Vue HTTP interceptor to add the X-Socket-ID header.\n   */\n  registerVueRequestInterceptor() {\n    Vue.http.interceptors.push(\n      (e, t) => {\n        this.socketId() && e.headers.set(\"X-Socket-ID\", this.socketId()), t();\n      }\n    );\n  }\n  /**\n   * Register an Axios HTTP interceptor to add the X-Socket-ID header.\n   */\n  registerAxiosRequestInterceptor() {\n    axios.interceptors.request.use(\n      (e) => (this.socketId() && (e.headers[\"X-Socket-Id\"] = this.socketId()), e)\n    );\n  }\n  /**\n   * Register jQuery AjaxPrefilter to add the X-Socket-ID header.\n   */\n  registerjQueryAjaxSetup() {\n    typeof jQuery.ajax < \"u\" && jQuery.ajaxPrefilter(\n      (e, t, s) => {\n        this.socketId() && s.setRequestHeader(\"X-Socket-Id\", this.socketId());\n      }\n    );\n  }\n  /**\n   * Register the Turbo Request interceptor to add the X-Socket-ID header.\n   */\n  registerTurboRequestInterceptor() {\n    document.addEventListener(\n      \"turbo:before-fetch-request\",\n      (e) => {\n        e.detail.fetchOptions.headers[\"X-Socket-Id\"] = this.socketId();\n      }\n    );\n  }\n}\nexport {\n  u as Channel,\n  i as Connector,\n  d as EventFormatter,\n  E as default\n};\n//# sourceMappingURL=echo.js.map\n","import Echo, { type BroadcastDriver, type EchoOptions } from \"laravel-echo\";\nimport Pusher from \"pusher-js\";\nimport type { ConfigDefaults } from \"../types\";\n\nlet echoInstance: Echo<BroadcastDriver> | null = null;\nlet echoConfig: EchoOptions<BroadcastDriver> | null = null;\n\nconst getEchoInstance = <T extends BroadcastDriver>(): Echo<T> => {\n    if (echoInstance) {\n        return echoInstance as Echo<T>;\n    }\n\n    if (!echoConfig) {\n        throw new Error(\n            \"Echo has not been configured. Please call `configureEcho()`.\",\n        );\n    }\n\n    echoConfig.Pusher ??= Pusher;\n\n    echoInstance = new Echo(echoConfig);\n\n    return echoInstance as Echo<T>;\n};\n\n/**\n * Configure the Echo instance with sensible defaults.\n *\n * @link https://laravel.com/docs/broadcasting#client-side-installation\n */\nexport const configureEcho = <T extends BroadcastDriver>(\n    config: EchoOptions<T>,\n): void => {\n    const defaults: ConfigDefaults<BroadcastDriver> = {\n        reverb: {\n            broadcaster: \"reverb\",\n            key: import.meta.env.VITE_REVERB_APP_KEY,\n            wsHost: import.meta.env.VITE_REVERB_HOST,\n            wsPort: import.meta.env.VITE_REVERB_PORT,\n            wssPort: import.meta.env.VITE_REVERB_PORT,\n            forceTLS:\n                (import.meta.env.VITE_REVERB_SCHEME ?? \"https\") === \"https\",\n            enabledTransports: [\"ws\", \"wss\"],\n        },\n        pusher: {\n            broadcaster: \"pusher\",\n            key: import.meta.env.VITE_PUSHER_APP_KEY,\n            cluster: import.meta.env.VITE_PUSHER_APP_CLUSTER,\n            forceTLS: true,\n            wsHost: import.meta.env.VITE_PUSHER_HOST,\n            wsPort: import.meta.env.VITE_PUSHER_PORT,\n            wssPort: import.meta.env.VITE_PUSHER_PORT,\n            enabledTransports: [\"ws\", \"wss\"],\n        },\n        \"socket.io\": {\n            broadcaster: \"socket.io\",\n            host: import.meta.env.VITE_SOCKET_IO_HOST,\n        },\n        null: {\n            broadcaster: \"null\",\n        },\n        ably: {\n            broadcaster: \"pusher\",\n            key: import.meta.env.VITE_ABLY_PUBLIC_KEY,\n            wsHost: \"realtime-pusher.ably.io\",\n            wsPort: 443,\n            disableStats: true,\n            encrypted: true,\n        },\n    };\n\n    echoConfig = {\n        ...defaults[config.broadcaster],\n        ...config,\n    } as EchoOptions<BroadcastDriver>;\n\n    // Reset the instance if it was already created\n    if (echoInstance) {\n        echoInstance = null;\n    }\n};\n\nexport const echo = <T extends BroadcastDriver>(): Echo<T> =>\n    getEchoInstance<T>();\n\nexport const echoIsConfigured = () => echoConfig !== null;\n","export const toArray = <T>(item: T | T[]): T[] =>\n    Array.isArray(item) ? item : [item];\n","import { type BroadcastDriver } from \"laravel-echo\";\nimport { useCallback, useEffect, useRef } from \"react\";\nimport { echo } from \"../config\";\nimport type {\n    BroadcastNotification,\n    Channel,\n    ChannelData,\n    ChannelReturnType,\n    Connection,\n    ModelEvents,\n    ModelPayload,\n} from \"../types\";\nimport { toArray } from \"../util\";\n\nconst channels: Record<string, ChannelData<BroadcastDriver>> = {};\n\nconst subscribeToChannel = <T extends BroadcastDriver>(\n    channel: Channel,\n): Connection<T> => {\n    const instance = echo<T>();\n\n    if (channel.visibility === \"presence\") {\n        return instance.join(channel.name);\n    }\n\n    if (channel.visibility === \"private\") {\n        return instance.private(channel.name);\n    }\n\n    return instance.channel(channel.name);\n};\n\nconst leaveChannel = (channel: Channel, leaveAll: boolean): void => {\n    if (!channels[channel.id]) {\n        return;\n    }\n\n    channels[channel.id].count -= 1;\n\n    if (channels[channel.id].count > 0) {\n        return;\n    }\n\n    if (leaveAll) {\n        echo().leave(channel.name);\n    } else {\n        echo().leaveChannel(channel.id);\n    }\n\n    delete channels[channel.id];\n};\n\nconst resolveChannelSubscription = <T extends BroadcastDriver>(\n    channel: Channel,\n): Connection<T> => {\n    if (channels[channel.id]) {\n        channels[channel.id].count += 1;\n\n        return channels[channel.id].connection;\n    }\n\n    const channelSubscription = subscribeToChannel<T>(channel);\n\n    channels[channel.id] = {\n        count: 1,\n        connection: channelSubscription,\n    };\n\n    return channelSubscription;\n};\n\nexport const useEcho = <\n    TPayload,\n    TDriver extends BroadcastDriver = BroadcastDriver,\n    TVisibility extends Channel[\"visibility\"] = \"private\",\n>(\n    channelName: string,\n    event: string | string[] = [],\n    callback: (payload: TPayload) => void = () => {},\n    dependencies: any[] = [],\n    visibility: TVisibility = \"private\" as TVisibility,\n) => {\n    const channel: Channel = {\n        name: channelName,\n        id: [\"private\", \"presence\"].includes(visibility)\n            ? `${visibility}-${channelName}`\n            : channelName,\n        visibility,\n    };\n\n    const callbackFunc = useCallback(callback, dependencies);\n    const listening = useRef(false);\n    const initialized = useRef(false);\n    const subscription = useRef<Connection<TDriver>>(\n        resolveChannelSubscription<TDriver>(channel),\n    );\n\n    const events = toArray(event);\n\n    const stopListening = useCallback(() => {\n        if (!listening.current) {\n            return;\n        }\n\n        events.forEach((e) => {\n            subscription.current.stopListening(e, callbackFunc);\n        });\n\n        listening.current = false;\n    }, dependencies);\n\n    const listen = useCallback(() => {\n        if (listening.current) {\n            return;\n        }\n\n        events.forEach((e) => {\n            subscription.current.listen(e, callbackFunc);\n        });\n\n        listening.current = true;\n    }, dependencies);\n\n    const tearDown = useCallback((leaveAll: boolean = false) => {\n        stopListening();\n\n        leaveChannel(channel, leaveAll);\n    }, dependencies);\n\n    useEffect(() => {\n        if (initialized.current) {\n            subscription.current = resolveChannelSubscription<TDriver>(channel);\n        }\n\n        initialized.current = true;\n\n        listen();\n\n        return tearDown;\n    }, dependencies);\n\n    return {\n        /**\n         * Leave the channel\n         */\n        leaveChannel: tearDown,\n        /**\n         * Leave the channel and also its associated private and presence channels\n         */\n        leave: () => tearDown(true),\n        /**\n         * Stop listening for event(s) without leaving the channel\n         */\n        stopListening,\n        /**\n         * Listen for event(s)\n         */\n        listen,\n        /**\n         * Channel instance\n         */\n        channel: () =>\n            subscription.current as ChannelReturnType<TDriver, TVisibility>,\n    };\n};\n\nexport const useEchoNotification = <\n    TPayload,\n    TDriver extends BroadcastDriver = BroadcastDriver,\n>(\n    channelName: string,\n    callback: (payload: BroadcastNotification<TPayload>) => void = () => {},\n    event: string | string[] = [],\n    dependencies: any[] = [],\n) => {\n    const result = useEcho<BroadcastNotification<TPayload>, TDriver, \"private\">(\n        channelName,\n        [],\n        callback,\n        dependencies,\n        \"private\",\n    );\n\n    const events = useRef(\n        toArray(event)\n            .map((e) => {\n                if (e.includes(\".\")) {\n                    return [e, e.replace(/\\./g, \"\\\\\")];\n                }\n\n                return [e, e.replace(/\\\\/g, \".\")];\n            })\n            .flat(),\n    );\n    const listening = useRef(false);\n    const initialized = useRef(false);\n\n    const cb = useCallback(\n        (notification: BroadcastNotification<TPayload>) => {\n            if (!listening.current) {\n                return;\n            }\n\n            if (\n                events.current.length === 0 ||\n                events.current.includes(notification.type)\n            ) {\n                callback(notification);\n            }\n        },\n        dependencies.concat(events.current).concat([callback]),\n    );\n\n    const listen = useCallback(() => {\n        if (listening.current) {\n            return;\n        }\n\n        if (!initialized.current) {\n            result.channel().notification(cb);\n        }\n\n        listening.current = true;\n        initialized.current = true;\n    }, [cb]);\n\n    const stopListening = useCallback(() => {\n        if (!listening.current) {\n            return;\n        }\n\n        result.channel().stopListeningForNotification(cb);\n\n        listening.current = false;\n    }, [cb]);\n\n    useEffect(() => {\n        listen();\n\n        return () => stopListening();\n    }, dependencies.concat(events.current));\n\n    return {\n        ...result,\n        /**\n         * Stop listening for notification events\n         */\n        stopListening,\n        /**\n         * Listen for notification events\n         */\n        listen,\n    };\n};\n\nexport const useEchoPresence = <\n    TPayload,\n    TDriver extends BroadcastDriver = BroadcastDriver,\n>(\n    channelName: string,\n    event: string | string[] = [],\n    callback: (payload: TPayload) => void = () => {},\n    dependencies: any[] = [],\n) => {\n    return useEcho<TPayload, TDriver, \"presence\">(\n        channelName,\n        event,\n        callback,\n        dependencies,\n        \"presence\",\n    );\n};\n\nexport const useEchoPublic = <\n    TPayload,\n    TDriver extends BroadcastDriver = BroadcastDriver,\n>(\n    channelName: string,\n    event: string | string[] = [],\n    callback: (payload: TPayload) => void = () => {},\n    dependencies: any[] = [],\n) => {\n    return useEcho<TPayload, TDriver, \"public\">(\n        channelName,\n        event,\n        callback,\n        dependencies,\n        \"public\",\n    );\n};\n\nexport const useEchoModel = <\n    TPayload,\n    TModel extends string,\n    TDriver extends BroadcastDriver = BroadcastDriver,\n>(\n    model: TModel,\n    identifier: string | number,\n    event: ModelEvents<TModel> | ModelEvents<TModel>[] = [],\n    callback: (payload: ModelPayload<TPayload>) => void = () => {},\n    dependencies: any[] = [],\n) => {\n    return useEcho<ModelPayload<TPayload>, TDriver, \"private\">(\n        `${model}.${identifier}`,\n        toArray(event).map((e) => (e.startsWith(\".\") ? e : `.${e}`)),\n        callback,\n        dependencies,\n        \"private\",\n    );\n};\n"],"names":["u","e","t","d","w","n","l","s","r","a","f","g","y","b","v","m","h","k","C","_","c","i","o","I","p","E","echoInstance","echoConfig","getEchoInstance","Pusher","Echo","configureEcho","config","echo","echoIsConfigured","toArray","item","channels","subscribeToChannel","channel","instance","leaveChannel","leaveAll","resolveChannelSubscription","channelSubscription","useEcho","channelName","event","callback","dependencies","visibility","callbackFunc","useCallback","listening","useRef","initialized","subscription","events","stopListening","listen","tearDown","useEffect","useEchoNotification","result","cb","notification","useEchoPresence","useEchoPublic","useEchoModel","model","identifier"],"mappings":"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"}